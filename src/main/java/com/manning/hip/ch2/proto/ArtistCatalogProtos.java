// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/ch02/proto/example.proto

package com.manning.hip.ch2.proto;

public final class ArtistCatalogProtos {
  private ArtistCatalogProtos() {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }

  public static final class Artist extends
      com.google.protobuf.GeneratedMessage {
    // Use Artist.newBuilder() to construct.
    private Artist() {
      initFields();
    }

    private Artist(boolean noInit) {
    }

    private static final Artist defaultInstance;

    public static Artist getDefaultInstance() {
      return defaultInstance;
    }

    public Artist getDefaultInstanceForType() {
      return defaultInstance;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return com.manning.hip.ch2.proto.ArtistCatalogProtos.internal_static_proto_Artist_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return com.manning.hip.ch2.proto.ArtistCatalogProtos.internal_static_proto_Artist_fieldAccessorTable;
    }

    @Override
    protected Builder newBuilderForType(BuilderParent bp) {
      throw new UnsupportedOperationException("Not supported yet.");
    }

    public enum GenreType
        implements com.google.protobuf.ProtocolMessageEnum {
      CLASSICAL(0, 0),
      JAZZ(1, 1),
      BLUES(2, 2),;


      public final int getNumber() {
        return value;
      }

      public static GenreType valueOf(int value) {
        switch (value) {
          case 0:
            return CLASSICAL;
          case 1:
            return JAZZ;
          case 2:
            return BLUES;
          default:
            return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<GenreType>
      internalGetValueMap() {
        return internalValueMap;
      }

      private static com.google.protobuf.Internal.EnumLiteMap<GenreType>
          internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GenreType>() {
            public GenreType findValueByNumber(int number) {
              return GenreType.valueOf(number)
                  ;
            }
          };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }

      public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
        return getDescriptor();
      }

      public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
        return com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.getDescriptor()
            .getEnumTypes().get(0);
      }

      private static final GenreType[] VALUES = {
          CLASSICAL, JAZZ, BLUES,
      };

      public static GenreType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private GenreType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      static {
        com.manning.hip.ch2.proto.ArtistCatalogProtos.getDescriptor();
      }

      // @@protoc_insertion_point(enum_scope:proto.Artist.GenreType)
    }

    public static final class Albums extends
        com.google.protobuf.GeneratedMessage {
      // Use Albums.newBuilder() to construct.
      private Albums() {
        initFields();
      }

      private Albums(boolean noInit) {
      }

      private static final Albums defaultInstance;

      public static Albums getDefaultInstance() {
        return defaultInstance;
      }

      public Albums getDefaultInstanceForType() {
        return defaultInstance;
      }

      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
        return com.manning.hip.ch2.proto.ArtistCatalogProtos.internal_static_proto_Artist_Albums_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
        return com.manning.hip.ch2.proto.ArtistCatalogProtos.internal_static_proto_Artist_Albums_fieldAccessorTable;
      }

      // required string name = 1;
      public static final int NAME_FIELD_NUMBER = 1;
      private boolean hasName;
      private java.lang.String name_ = "";

      public boolean hasName() {
        return hasName;
      }

      public java.lang.String getName() {
        return name_;
      }

      // optional .proto.Artist.GenreType type = 2 [default = CLASSICAL];
      public static final int TYPE_FIELD_NUMBER = 2;
      private boolean hasType;
      private com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.GenreType type_;

      public boolean hasType() {
        return hasType;
      }

      public com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.GenreType getType() {
        return type_;
      }

      private void initFields() {
        type_ =
            com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.GenreType.CLASSICAL;
      }

      public final boolean isInitialized() {
        if (!hasName)
          return false;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
          throws java.io.IOException {
        getSerializedSize();
        if (hasName()) {
          output.writeString(1, getName());
        }
        if (hasType()) {
          output.writeEnum(2, getType().getNumber());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;

      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1)
          return size;

        size = 0;
        if (hasName()) {
          size += com.google.protobuf.CodedOutputStream
              .computeStringSize(1, getName());
        }
        if (hasType()) {
          size += com.google.protobuf.CodedOutputStream
              .computeEnumSize(2, getType().getNumber());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }

      public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
            .buildParsed();
      }

      public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums parseFrom(
          byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }

      public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
            .buildParsed();
      }

      public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums parseFrom(
          java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }

      public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
            .buildParsed();
      }

      public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums parseDelimitedFrom(
          java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }

      public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }

      public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }

      public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
            .buildParsed();
      }

      public static Builder newBuilder() {
        return Builder.create();
      }

      public Builder newBuilderForType() {
        return newBuilder();
      }

      public static Builder newBuilder(
          com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums prototype) {
        return newBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
        return newBuilder(this);
      }

      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums result;

        // Construct using com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums.newBuilder()
        private Builder() {
        }

        private static Builder create() {
          Builder builder = new Builder();
          builder.result =
              new com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums();
          return builder;
        }

        protected com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums internalGetResult() {
          return result;
        }

        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
                "Cannot call clear() after build().");
          }
          result = new com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums();
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(result);
        }

        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
          return com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums
              .getDescriptor();
        }

        public com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums getDefaultInstanceForType() {
          return com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums
              .getDefaultInstance();
        }

        public boolean isInitialized() {
          return result.isInitialized();
        }

        public com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }

        private com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
                result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }

        public com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
                "build() has already been called on this Builder.");
          }
          com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums returnMe =
              result;
          result = null;
          return returnMe;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums) {
            return mergeFrom(
                (com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums) other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(
            com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums other) {
          if (other == com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums
              .getDefaultInstance())
            return this;
          if (other.hasName()) {
            setName(other.getName());
          }
          if (other.hasType()) {
            setType(other.getType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder(
                  this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                    extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 10: {
                setName(input.readString());
                break;
              }
              case 16: {
                int rawValue = input.readEnum();
                com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.GenreType value =
                    com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.GenreType
                        .valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(2, rawValue);
                } else {
                  setType(value);
                }
                break;
              }
            }
          }
        }


        // required string name = 1;
        public boolean hasName() {
          return result.hasName();
        }

        public java.lang.String getName() {
          return result.getName();
        }

        public Builder setName(java.lang.String value) {
          if (value == null) {
            throw new NullPointerException();
          }
          result.hasName = true;
          result.name_ = value;
          return this;
        }

        public Builder clearName() {
          result.hasName = false;
          result.name_ = getDefaultInstance().getName();
          return this;
        }

        // optional .proto.Artist.GenreType type = 2 [default = CLASSICAL];
        public boolean hasType() {
          return result.hasType();
        }

        public com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.GenreType getType() {
          return result.getType();
        }

        public Builder setType(
            com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.GenreType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          result.hasType = true;
          result.type_ = value;
          return this;
        }

        public Builder clearType() {
          result.hasType = false;
          result.type_ =
              com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.GenreType.CLASSICAL;
          return this;
        }

        // @@protoc_insertion_point(builder_scope:proto.Artist.Albums)
      }

      static {
        defaultInstance = new Albums(true);
        com.manning.hip.ch2.proto.ArtistCatalogProtos.internalForceInit();
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:proto.Artist.Albums)
    }

    // required string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private boolean hasName;
    private java.lang.String name_ = "";

    public boolean hasName() {
      return hasName;
    }

    public java.lang.String getName() {
      return name_;
    }

    // required int32 playCount = 2;
    public static final int PLAYCOUNT_FIELD_NUMBER = 2;
    private boolean hasPlayCount;
    private int playCount_ = 0;

    public boolean hasPlayCount() {
      return hasPlayCount;
    }

    public int getPlayCount() {
      return playCount_;
    }

    // optional int32 id = 3;
    public static final int ID_FIELD_NUMBER = 3;
    private boolean hasId;
    private int id_ = 0;

    public boolean hasId() {
      return hasId;
    }

    public int getId() {
      return id_;
    }

    // repeated .proto.Artist.Albums album = 4;
    public static final int ALBUM_FIELD_NUMBER = 4;
    private java.util.List<com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums>
        album_ =
        java.util.Collections.emptyList();

    public java.util.List<com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums> getAlbumList() {
      return album_;
    }

    public int getAlbumCount() {
      return album_.size();
    }

    public com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums getAlbum(
        int index) {
      return album_.get(index);
    }

    private void initFields() {
    }

    public final boolean isInitialized() {
      if (!hasName)
        return false;
      if (!hasPlayCount)
        return false;
      for (com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums element : getAlbumList()) {
        if (!element.isInitialized())
          return false;
      }
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
        throws java.io.IOException {
      getSerializedSize();
      if (hasName()) {
        output.writeString(1, getName());
      }
      if (hasPlayCount()) {
        output.writeInt32(2, getPlayCount());
      }
      if (hasId()) {
        output.writeInt32(3, getId());
      }
      for (com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums element : getAlbumList()) {
        output.writeMessage(4, element);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1)
        return size;

      size = 0;
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
            .computeStringSize(1, getName());
      }
      if (hasPlayCount()) {
        size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, getPlayCount());
      }
      if (hasId()) {
        size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, getId());
      }
      for (com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums element : getAlbumList()) {
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
          .buildParsed();
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist parseFrom(
        byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
          .buildParsed();
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist parseFrom(
        java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
          .buildParsed();
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist parseDelimitedFrom(
        java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
          .buildParsed();
    }

    public static Builder newBuilder() {
      return Builder.create();
    }

    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder(
        com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist prototype) {
      return newBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
      return newBuilder(this);
    }

    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist result;

      // Construct using com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.newBuilder()
      private Builder() {
      }

      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist();
        return builder;
      }

      protected com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist internalGetResult() {
        return result;
      }

      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
              "Cannot call clear() after build().");
        }
        result = new com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(result);
      }

      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.getDescriptor();
      }

      public com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist getDefaultInstanceForType() {
        return com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist
            .getDefaultInstance();
      }

      public boolean isInitialized() {
        return result.isInitialized();
      }

      public com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }

      private com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }

      public com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
              "build() has already been called on this Builder.");
        }
        if (result.album_ != java.util.Collections.EMPTY_LIST) {
          result.album_ =
              java.util.Collections.unmodifiableList(result.album_);
        }
        com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist returnMe = result;
        result = null;
        return returnMe;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist) {
          return mergeFrom(
              (com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(
          com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist other) {
        if (other ==
            com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.getDefaultInstance())
          return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasPlayCount()) {
          setPlayCount(other.getPlayCount());
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (!other.album_.isEmpty()) {
          if (result.album_.isEmpty()) {
            result.album_ =
                new java.util.ArrayList<com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums>();
          }
          result.album_.addAll(other.album_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
                this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                  extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setName(input.readString());
              break;
            }
            case 16: {
              setPlayCount(input.readInt32());
              break;
            }
            case 24: {
              setId(input.readInt32());
              break;
            }
            case 34: {
              com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums.Builder
                  subBuilder =
                  com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums
                      .newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addAlbum(subBuilder.buildPartial());
              break;
            }
          }
        }
      }


      // required string name = 1;
      public boolean hasName() {
        return result.hasName();
      }

      public java.lang.String getName() {
        return result.getName();
      }

      public Builder setName(java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasName = true;
        result.name_ = value;
        return this;
      }

      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }

      // required int32 playCount = 2;
      public boolean hasPlayCount() {
        return result.hasPlayCount();
      }

      public int getPlayCount() {
        return result.getPlayCount();
      }

      public Builder setPlayCount(int value) {
        result.hasPlayCount = true;
        result.playCount_ = value;
        return this;
      }

      public Builder clearPlayCount() {
        result.hasPlayCount = false;
        result.playCount_ = 0;
        return this;
      }

      // optional int32 id = 3;
      public boolean hasId() {
        return result.hasId();
      }

      public int getId() {
        return result.getId();
      }

      public Builder setId(int value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }

      public Builder clearId() {
        result.hasId = false;
        result.id_ = 0;
        return this;
      }

      // repeated .proto.Artist.Albums album = 4;
      public java.util.List<com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums> getAlbumList() {
        return java.util.Collections.unmodifiableList(result.album_);
      }

      public int getAlbumCount() {
        return result.getAlbumCount();
      }

      public com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums getAlbum(
          int index) {
        return result.getAlbum(index);
      }

      public Builder setAlbum(int index,
                              com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.album_.set(index, value);
        return this;
      }

      public Builder setAlbum(int index,
                              com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums.Builder builderForValue) {
        result.album_.set(index, builderForValue.build());
        return this;
      }

      public Builder addAlbum(
          com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.album_.isEmpty()) {
          result.album_ =
              new java.util.ArrayList<com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums>();
        }
        result.album_.add(value);
        return this;
      }

      public Builder addAlbum(
          com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums.Builder builderForValue) {
        if (result.album_.isEmpty()) {
          result.album_ =
              new java.util.ArrayList<com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums>();
        }
        result.album_.add(builderForValue.build());
        return this;
      }

      public Builder addAllAlbum(
          java.lang.Iterable<? extends com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums> values) {
        if (result.album_.isEmpty()) {
          result.album_ =
              new java.util.ArrayList<com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums>();
        }
        super.addAll(values, result.album_);
        return this;
      }

      public Builder clearAlbum() {
        result.album_ = java.util.Collections.emptyList();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto.Artist)

      @Override
      protected FieldAccessorTable internalGetFieldAccessorTable() {
        throw new UnsupportedOperationException("Not supported yet.");
      }
    }

    static {
      defaultInstance = new Artist(true);
      com.manning.hip.ch2.proto.ArtistCatalogProtos.internalForceInit();
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.Artist)
  }

  public static final class ArtistCatalog extends
      com.google.protobuf.GeneratedMessage {
    // Use ArtistCatalog.newBuilder() to construct.
    private ArtistCatalog() {
      initFields();
    }

    private ArtistCatalog(boolean noInit) {
    }

    private static final ArtistCatalog defaultInstance;

    public static ArtistCatalog getDefaultInstance() {
      return defaultInstance;
    }

    public ArtistCatalog getDefaultInstanceForType() {
      return defaultInstance;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return com.manning.hip.ch2.proto.ArtistCatalogProtos.internal_static_proto_ArtistCatalog_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return com.manning.hip.ch2.proto.ArtistCatalogProtos.internal_static_proto_ArtistCatalog_fieldAccessorTable;
    }

    // repeated .proto.Artist artist = 1;
    public static final int ARTIST_FIELD_NUMBER = 1;
    private java.util.List<com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist>
        artist_ =
        java.util.Collections.emptyList();

    public java.util.List<com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist> getArtistList() {
      return artist_;
    }

    public int getArtistCount() {
      return artist_.size();
    }

    public com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist getArtist(int index) {
      return artist_.get(index);
    }

    private void initFields() {
    }

    public final boolean isInitialized() {
      for (com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist element : getArtistList()) {
        if (!element.isInitialized())
          return false;
      }
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
        throws java.io.IOException {
      getSerializedSize();
      for (com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist element : getArtistList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1)
        return size;

      size = 0;
      for (com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist element : getArtistList()) {
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
          .buildParsed();
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog parseFrom(
        byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
          .buildParsed();
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog parseFrom(
        java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
          .buildParsed();
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog parseDelimitedFrom(
        java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }

    public static com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
          .buildParsed();
    }

    public static Builder newBuilder() {
      return Builder.create();
    }

    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder(
        com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog prototype) {
      return newBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
      return newBuilder(this);
    }

    @Override
    protected Builder newBuilderForType(BuilderParent bp) {
      throw new UnsupportedOperationException("Not supported yet.");
    }

    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog result;

      // Construct using com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog.newBuilder()
      private Builder() {
      }

      private static Builder create() {
        Builder builder = new Builder();
        builder.result =
            new com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog();
        return builder;
      }

      protected com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog internalGetResult() {
        return result;
      }

      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
              "Cannot call clear() after build().");
        }
        result = new com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(result);
      }

      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog
            .getDescriptor();
      }

      public com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog getDefaultInstanceForType() {
        return com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog
            .getDefaultInstance();
      }

      public boolean isInitialized() {
        return result.isInitialized();
      }

      public com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }

      private com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }

      public com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
              "build() has already been called on this Builder.");
        }
        if (result.artist_ != java.util.Collections.EMPTY_LIST) {
          result.artist_ =
              java.util.Collections.unmodifiableList(result.artist_);
        }
        com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog returnMe = result;
        result = null;
        return returnMe;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog) {
          return mergeFrom(
              (com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(
          com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog other) {
        if (other == com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog
            .getDefaultInstance())
          return this;
        if (!other.artist_.isEmpty()) {
          if (result.artist_.isEmpty()) {
            result.artist_ =
                new java.util.ArrayList<com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist>();
          }
          result.artist_.addAll(other.artist_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
                this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                  extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Builder subBuilder =
                  com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addArtist(subBuilder.buildPartial());
              break;
            }
          }
        }
      }


      // repeated .proto.Artist artist = 1;
      public java.util.List<com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist> getArtistList() {
        return java.util.Collections.unmodifiableList(result.artist_);
      }

      public int getArtistCount() {
        return result.getArtistCount();
      }

      public com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist getArtist(
          int index) {
        return result.getArtist(index);
      }

      public Builder setArtist(int index,
                               com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.artist_.set(index, value);
        return this;
      }

      public Builder setArtist(int index,
                               com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Builder builderForValue) {
        result.artist_.set(index, builderForValue.build());
        return this;
      }

      public Builder addArtist(
          com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.artist_.isEmpty()) {
          result.artist_ =
              new java.util.ArrayList<com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist>();
        }
        result.artist_.add(value);
        return this;
      }

      public Builder addArtist(
          com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Builder builderForValue) {
        if (result.artist_.isEmpty()) {
          result.artist_ =
              new java.util.ArrayList<com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist>();
        }
        result.artist_.add(builderForValue.build());
        return this;
      }

      public Builder addAllArtist(
          java.lang.Iterable<? extends com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist> values) {
        if (result.artist_.isEmpty()) {
          result.artist_ =
              new java.util.ArrayList<com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist>();
        }
        super.addAll(values, result.artist_);
        return this;
      }

      public Builder clearArtist() {
        result.artist_ = java.util.Collections.emptyList();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto.ArtistCatalog)
    }

    static {
      defaultInstance = new ArtistCatalog(true);
      com.manning.hip.ch2.proto.ArtistCatalogProtos.internalForceInit();
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.ArtistCatalog)
  }

  private static com.google.protobuf.Descriptors.Descriptor
      internal_static_proto_Artist_descriptor;
  private static
  com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_Artist_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
      internal_static_proto_Artist_Albums_descriptor;
  private static
  com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_Artist_Albums_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
      internal_static_proto_ArtistCatalog_descriptor;
  private static
  com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_ArtistCatalog_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
  getDescriptor() {
    return descriptor;
  }

  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;

  static {
    java.lang.String[] descriptorData = {
        "\n\034src/ch02/proto/example.proto\022\005proto\"\325\001" +
            "\n\006Artist\022\014\n\004name\030\001 \002(\t\022\021\n\tplayCount\030\002 \002(" +
            "\005\022\n\n\002id\030\003 \001(\005\022#\n\005album\030\004 \003(\0132\024.proto.Art" +
            "ist.Albums\032H\n\006Albums\022\014\n\004name\030\001 \002(\t\0220\n\004ty" +
            "pe\030\002 \001(\0162\027.proto.Artist.GenreType:\tCLASS" +
            "ICAL\"/\n\tGenreType\022\r\n\tCLASSICAL\020\000\022\010\n\004JAZZ" +
            "\020\001\022\t\n\005BLUES\020\002\".\n\rArtistCatalog\022\035\n\006artist" +
            "\030\001 \003(\0132\r.proto.ArtistB!\n\nch02.protoB\023Art" +
            "istCatalogProtos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner
        assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            internal_static_proto_Artist_descriptor =
                getDescriptor().getMessageTypes().get(0);
            internal_static_proto_Artist_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_proto_Artist_descriptor,
                new java.lang.String[]{"Name", "PlayCount", "Id",
                    "Album",},
                com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.class,
                com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Builder.class);
            internal_static_proto_Artist_Albums_descriptor =
                internal_static_proto_Artist_descriptor.getNestedTypes()
                    .get(0);
            internal_static_proto_Artist_Albums_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_proto_Artist_Albums_descriptor,
                new java.lang.String[]{"Name", "Type",},
                com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums.class,
                com.manning.hip.ch2.proto.ArtistCatalogProtos.Artist.Albums.Builder.class);
            internal_static_proto_ArtistCatalog_descriptor =
                getDescriptor().getMessageTypes().get(1);
            internal_static_proto_ArtistCatalog_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_proto_ArtistCatalog_descriptor,
                new java.lang.String[]{"Artist",},
                com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog.class,
                com.manning.hip.ch2.proto.ArtistCatalogProtos.ArtistCatalog.Builder.class);
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
        .internalBuildGeneratedFileFrom(descriptorData,
            new com.google.protobuf.Descriptors.FileDescriptor[]{
            }, assigner);
  }

  public static void internalForceInit() {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
